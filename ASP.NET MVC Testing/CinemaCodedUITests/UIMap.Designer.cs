// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CinemaCodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// LogInAdmin - Use 'LogInAdminParams' to pass parameters into this method.
        /// </summary>
        public void LogInAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UICinemaCinemaInternetWindow.UICinemaCinemaDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit = this.UICinemaCinemaInternetWindow.UILoginCinemaDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UICinemaCinemaInternetWindow.UILoginCinemaDocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UICinemaCinemaInternetWindow.UILoginCinemaDocument.UILoginButton;
            #endregion

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(30, 17));

            // Type 'admin@admin.com' in 'Email' text box
            uIEmailEdit.Text = this.LogInAdminParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LogInAdminParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(43, 13));
        }
        
        /// <summary>
        /// AssertLogInAdmin - Use 'AssertLogInAdminExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertLogInAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uIHelloadminadmincomHyperlink = this.UICinemaCinemaInternetWindow.UICinemaCinemaDocument.UIHelloadminadmincomHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Hello admin@admin.com!' link equals 'Hello admin@admin.com!'
            Assert.AreEqual(this.AssertLogInAdminExpectedValues.UIHelloadminadmincomHyperlinkInnerText, uIHelloadminadmincomHyperlink.InnerText);
        }
        
        /// <summary>
        /// CreateInvalidFilm - Use 'CreateInvalidFilmParams' to pass parameters into this method.
        /// </summary>
        public void CreateInvalidFilm()
        {
            #region Variable Declarations
            HtmlHyperlink uIFilmsHyperlink = this.UICinemaCinemaInternetWindow.UICinemaCinemaDocument.UIFilmsHyperlink;
            HtmlHyperlink uICreateNewHyperlink = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UICreateNewHyperlink;
            HtmlEdit uIFilmtitleEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UIFilmtitleEdit;
            HtmlEdit uIReleaseyearEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UIReleaseyearEdit;
            HtmlEdit uILengthminutesEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UILengthminutesEdit;
            HtmlInputButton uICreateButton = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UICreateButton;
            #endregion

            // Click 'Films' link
            Mouse.Click(uIFilmsHyperlink, new Point(26, 21));

            // Click 'Create New' link
            Mouse.Click(uICreateNewHyperlink, new Point(50, 1));

            // Type 'Film title' in 'Film title' text box
            uIFilmtitleEdit.Text = this.CreateInvalidFilmParams.UIFilmtitleEditText;

            // Type '1410' in 'Release year' text box
            uIReleaseyearEdit.Text = this.CreateInvalidFilmParams.UIReleaseyearEditText;

            // Type '123' in 'Length (minutes)' text box
            uILengthminutesEdit.Text = this.CreateInvalidFilmParams.UILengthminutesEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(41, 15));
        }
        
        /// <summary>
        /// AssertCreateInvalidFilm - Use 'AssertCreateInvalidFilmExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCreateInvalidFilm()
        {
            #region Variable Declarations
            HtmlSpan uIWrongfilmreleasedatePane = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UIWrongfilmreleasedatePane;
            #endregion

            // Verify that the 'InnerText' property of 'Wrong film release date.' pane equals 'Wrong film release date.'
            Assert.AreEqual(this.AssertCreateInvalidFilmExpectedValues.UIWrongfilmreleasedatePaneInnerText, uIWrongfilmreleasedatePane.InnerText);
        }
        
        /// <summary>
        /// CreateValidFilm - Use 'CreateValidFilmParams' to pass parameters into this method.
        /// </summary>
        public void CreateValidFilm()
        {
            #region Variable Declarations
            HtmlEdit uIReleaseyearEdit1 = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UIReleaseyearEdit1;
            HtmlInputButton uICreateButton = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument.UICreateButton;
            #endregion

            // Type '2017' in 'Release year' text box
            uIReleaseyearEdit1.Text = this.CreateValidFilmParams.UIReleaseyearEdit1Text;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(31, 18));

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(42, 18));
        }
        
        /// <summary>
        /// AssertCreateValidFilm - Use 'AssertCreateValidFilmExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCreateValidFilm()
        {
            #region Variable Declarations
            HtmlCell uIFilmtitleCell = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UIItemTable.UIFilmtitleCell;
            #endregion

            // Verify that the 'InnerText' property of 'Film title' cell equals 'Film title '
            Assert.AreEqual(this.AssertCreateValidFilmExpectedValues.UIFilmtitleCellInnerText, uIFilmtitleCell.InnerText);
        }
        
        /// <summary>
        /// DetailsFilm
        /// </summary>
        public void DetailsFilm()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UIDetailsHyperlink;
            HtmlHyperlink uIBacktoListHyperlink = this.UICinemaCinemaInternetWindow.UIDetailsCinemaDocument.UIBacktoListHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(24, 7));

            // Click 'Back to List' link
            Mouse.Click(uIBacktoListHyperlink, new Point(46, 2));
        }
        
        /// <summary>
        /// EditFilm - Use 'EditFilmParams' to pass parameters into this method.
        /// </summary>
        public void EditFilm()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UIEditHyperlink;
            HtmlEdit uIFilmtitleEdit = this.UICinemaCinemaInternetWindow.UIEditCinemaDocument.UIFilmtitleEdit;
            HtmlInputButton uISaveButton = this.UICinemaCinemaInternetWindow.UIEditCinemaDocument.UISaveButton;
            #endregion

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(4, 9));

            // Type 'Edit' in 'Film title' text box
            uIFilmtitleEdit.Text = this.EditFilmParams.UIFilmtitleEditText;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(33, 20));
        }
        
        /// <summary>
        /// AssertEditFilm - Use 'AssertEditFilmExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEditFilm()
        {
            #region Variable Declarations
            HtmlCell uIEditCell = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UIItemTable.UIEditCell;
            #endregion

            // Verify that the 'InnerText' property of 'Edit' cell equals 'Edit '
            Assert.AreEqual(this.AssertEditFilmExpectedValues.UIEditCellInnerText, uIEditCell.InnerText);
        }
        
        /// <summary>
        /// CreateInvalidCustomer - Use 'CreateInvalidCustomerParams' to pass parameters into this method.
        /// </summary>
        public void CreateInvalidCustomer()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UICustomersHyperlink;
            HtmlHyperlink uICreateNewHyperlink = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UICreateNewHyperlink;
            HtmlEdit uIFirstnameEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UIFirstnameEdit;
            HtmlEdit uILastnameEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UILastnameEdit;
            HtmlEdit uIEmailEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UIEmailEdit;
            HtmlInputButton uICreateButton = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UICreateButton;
            #endregion

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(57, 24));

            // Click 'Create New' link
            Mouse.Click(uICreateNewHyperlink, new Point(59, 6));

            // Type 'kamil' in 'First name' text box
            uIFirstnameEdit.Text = this.CreateInvalidCustomerParams.UIFirstnameEditText;

            // Type 'Sarzy' in 'Last name' text box
            uILastnameEdit.Text = this.CreateInvalidCustomerParams.UILastnameEditText;

            // Type 'Alt, Control + n' in 'Last name' text box
            Keyboard.SendKeys(uILastnameEdit, this.CreateInvalidCustomerParams.UILastnameEditSendKeys, (ModifierKeys.Alt | ModifierKeys.Control));

            // Type 'Sarzyński' in 'Last name' text box
            uILastnameEdit.Text = this.CreateInvalidCustomerParams.UILastnameEditText1;

            // Type 'ksarzynski@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.CreateInvalidCustomerParams.UIEmailEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(46, 7));
        }
        
        /// <summary>
        /// AssertCreateInvalidCustomer - Use 'AssertCreateInvalidCustomerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCreateInvalidCustomer()
        {
            #region Variable Declarations
            HtmlSpan uIMuststartwithcapitalPane = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UIMuststartwithcapitalPane;
            #endregion

            // Verify that the 'InnerText' property of 'Must start with capital letter.' pane equals 'Must start with capital letter.'
            Assert.AreEqual(this.AssertCreateInvalidCustomerExpectedValues.UIMuststartwithcapitalPaneInnerText, uIMuststartwithcapitalPane.InnerText);
        }
        
        /// <summary>
        /// CreateValidCustomer - Use 'CreateValidCustomerParams' to pass parameters into this method.
        /// </summary>
        public void CreateValidCustomer()
        {
            #region Variable Declarations
            HtmlEdit uIFirstnameEdit1 = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UIFirstnameEdit1;
            HtmlInputButton uICreateButton = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument1.UICreateButton;
            #endregion

            // Type 'Kamil' in 'First name' text box
            uIFirstnameEdit1.Text = this.CreateValidCustomerParams.UIFirstnameEdit1Text;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(39, 15));

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(40, 18));
        }
        
        /// <summary>
        /// AssertCreateValidCustomer - Use 'AssertCreateValidCustomerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCreateValidCustomer()
        {
            #region Variable Declarations
            HtmlCell uISarzyńskiCell = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UIItemTable.UISarzyńskiCell;
            #endregion

            // Verify that the 'InnerText' property of 'Sarzyński' cell equals 'Sarzyński '
            Assert.AreEqual(this.AssertCreateValidCustomerExpectedValues.UISarzyńskiCellInnerText, uISarzyńskiCell.InnerText);
        }
        
        /// <summary>
        /// DetailsCustomer
        /// </summary>
        public void DetailsCustomer()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UIDetailsHyperlink;
            HtmlHyperlink uIBacktoListHyperlink = this.UICinemaCinemaInternetWindow.UIDetailsCinemaDocument1.UIBacktoListHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(21, 9));

            // Click 'Back to List' link
            Mouse.Click(uIBacktoListHyperlink, new Point(42, 2));
        }
        
        /// <summary>
        /// EditCustomer - Use 'EditCustomerParams' to pass parameters into this method.
        /// </summary>
        public void EditCustomer()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UIEditHyperlink;
            HtmlEdit uIFirstnameEdit = this.UICinemaCinemaInternetWindow.UIEditCinemaDocument1.UIFirstnameEdit;
            HtmlInputButton uISaveButton = this.UICinemaCinemaInternetWindow.UIEditCinemaDocument1.UISaveButton;
            #endregion

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(17, 8));

            // Type 'Jan' in 'First name' text box
            uIFirstnameEdit.Text = this.EditCustomerParams.UIFirstnameEditText;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(43, 25));
        }
        
        /// <summary>
        /// AssertEditCustomer - Use 'AssertEditCustomerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEditCustomer()
        {
            #region Variable Declarations
            HtmlCell uIJanCell = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UIItemTable.UIJanCell;
            #endregion

            // Verify that the 'InnerText' property of 'Jan' cell equals 'Jan '
            Assert.AreEqual(this.AssertEditCustomerExpectedValues.UIJanCellInnerText, uIJanCell.InnerText);
        }
        
        /// <summary>
        /// CreateTicket - Use 'CreateTicketParams' to pass parameters into this method.
        /// </summary>
        public void CreateTicket()
        {
            #region Variable Declarations
            HtmlHyperlink uITicketsHyperlink = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UITicketsHyperlink;
            HtmlHyperlink uICreateNewHyperlink = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UICreateNewHyperlink;
            HtmlEdit uITicketpriceEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument2.UITicketpriceEdit;
            HtmlEdit uIScreeningdateEdit = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument2.UIScreeningdateEdit;
            HtmlInputButton uICreateButton = this.UICinemaCinemaInternetWindow.UICreateCinemaDocument2.UICreateButton;
            #endregion

            // Click 'Tickets' link
            Mouse.Click(uITicketsHyperlink, new Point(24, 26));

            // Click 'Create New' link
            Mouse.Click(uICreateNewHyperlink, new Point(45, 4));

            // Type '12' in 'Ticket price' text box
            uITicketpriceEdit.Text = this.CreateTicketParams.UITicketpriceEditText;

            // Type '12/12/2017' in 'Screening date' text box
            uIScreeningdateEdit.Text = this.CreateTicketParams.UIScreeningdateEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(43, 15));
        }
        
        /// <summary>
        /// AssertCreateTicket - Use 'AssertCreateTicketExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCreateTicket()
        {
            #region Variable Declarations
            HtmlCell uIItem1200złCell = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UIItemTable.UIItem1200złCell;
            #endregion

            // Verify that the 'InnerText' property of '12,00 zł' cell equals '12,00 zł '
            Assert.AreEqual(this.AssertCreateTicketExpectedValues.UIItem1200złCellInnerText, uIItem1200złCell.InnerText);
        }
        
        /// <summary>
        /// DetailsTicket
        /// </summary>
        public void DetailsTicket()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UIDetailsHyperlink;
            HtmlHyperlink uIBacktoListHyperlink = this.UICinemaCinemaInternetWindow.UIDetailsCinemaDocument2.UIBacktoListHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(12, 11));

            // Click 'Back to List' link
            Mouse.Click(uIBacktoListHyperlink, new Point(30, 6));
        }
        
        /// <summary>
        /// EditTicket - Use 'EditTicketParams' to pass parameters into this method.
        /// </summary>
        public void EditTicket()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UIEditHyperlink;
            HtmlEdit uITicketpriceEdit = this.UICinemaCinemaInternetWindow.UIEditCinemaDocument2.UITicketpriceEdit;
            HtmlInputButton uISaveButton = this.UICinemaCinemaInternetWindow.UIEditCinemaDocument2.UISaveButton;
            #endregion

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(14, 4));

            // Type '14' in 'Ticket price' text box
            uITicketpriceEdit.Text = this.EditTicketParams.UITicketpriceEditText;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(23, 14));
        }
        
        /// <summary>
        /// AssertEditTicket - Use 'AssertEditTicketExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEditTicket()
        {
            #region Variable Declarations
            HtmlCell uIItem1400złCell = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UIItemTable.UIItem1400złCell;
            #endregion

            // Verify that the 'InnerText' property of '14,00 zł' cell equals '14,00 zł '
            Assert.AreEqual(this.AssertEditTicketExpectedValues.UIItem1400złCellInnerText, uIItem1400złCell.InnerText);
        }
        
        /// <summary>
        /// DeleteTicket
        /// </summary>
        public void DeleteTicket()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteHyperlink = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UIDeleteHyperlink;
            HtmlInputButton uIDeleteButton = this.UICinemaCinemaInternetWindow.UIDeleteCinemaDocument.UIDeleteButton;
            #endregion

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink, new Point(17, 8));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(35, 16));
        }
        
        /// <summary>
        /// DeleteCustomer
        /// </summary>
        public void DeleteCustomer()
        {
            #region Variable Declarations
            HtmlHyperlink uICustomersHyperlink = this.UICinemaCinemaInternetWindow.UITicketsCinemaDocument.UICustomersHyperlink;
            HtmlHyperlink uIDeleteHyperlink = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UIDeleteHyperlink;
            HtmlInputButton uIDeleteButton = this.UICinemaCinemaInternetWindow.UIDeleteCinemaDocument1.UIDeleteButton;
            #endregion

            // Click 'Customers' link
            Mouse.Click(uICustomersHyperlink, new Point(41, 24));

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink, new Point(22, 13));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(41, 12));
        }
        
        /// <summary>
        /// DeleteFilm
        /// </summary>
        public void DeleteFilm()
        {
            #region Variable Declarations
            HtmlHyperlink uIFilmsHyperlink = this.UICinemaCinemaInternetWindow.UICustomersCinemaDocument.UIFilmsHyperlink;
            HtmlHyperlink uIDeleteHyperlink = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UIDeleteHyperlink;
            HtmlInputButton uIDeleteButton = this.UICinemaCinemaInternetWindow.UIDeleteCinemaDocument2.UIDeleteButton;
            #endregion

            // Click 'Films' link
            Mouse.Click(uIFilmsHyperlink, new Point(29, 22));

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink, new Point(21, 11));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(40, 12));
        }
        
        /// <summary>
        /// AdminLogOut
        /// </summary>
        public void AdminLogOut()
        {
            #region Variable Declarations
            HtmlButton uILogoutButton = this.UICinemaCinemaInternetWindow.UIFilmsCinemaDocument.UILogoutButton;
            #endregion

            // Click 'Log out' button
            Mouse.Click(uILogoutButton, new Point(28, 24));
        }
        
        /// <summary>
        /// AssertAdminLogOut - Use 'AssertAdminLogOutExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAdminLogOut()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UICinemaCinemaInternetWindow.UICinemaCinemaDocument.UILoginHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Log in' link equals 'Log in'
            Assert.AreEqual(this.AssertAdminLogOutExpectedValues.UILoginHyperlinkInnerText, uILoginHyperlink.InnerText);
        }
        
        #region Properties
        public virtual LogInAdminParams LogInAdminParams
        {
            get
            {
                if ((this.mLogInAdminParams == null))
                {
                    this.mLogInAdminParams = new LogInAdminParams();
                }
                return this.mLogInAdminParams;
            }
        }
        
        public virtual AssertLogInAdminExpectedValues AssertLogInAdminExpectedValues
        {
            get
            {
                if ((this.mAssertLogInAdminExpectedValues == null))
                {
                    this.mAssertLogInAdminExpectedValues = new AssertLogInAdminExpectedValues();
                }
                return this.mAssertLogInAdminExpectedValues;
            }
        }
        
        public virtual CreateInvalidFilmParams CreateInvalidFilmParams
        {
            get
            {
                if ((this.mCreateInvalidFilmParams == null))
                {
                    this.mCreateInvalidFilmParams = new CreateInvalidFilmParams();
                }
                return this.mCreateInvalidFilmParams;
            }
        }
        
        public virtual AssertCreateInvalidFilmExpectedValues AssertCreateInvalidFilmExpectedValues
        {
            get
            {
                if ((this.mAssertCreateInvalidFilmExpectedValues == null))
                {
                    this.mAssertCreateInvalidFilmExpectedValues = new AssertCreateInvalidFilmExpectedValues();
                }
                return this.mAssertCreateInvalidFilmExpectedValues;
            }
        }
        
        public virtual CreateValidFilmParams CreateValidFilmParams
        {
            get
            {
                if ((this.mCreateValidFilmParams == null))
                {
                    this.mCreateValidFilmParams = new CreateValidFilmParams();
                }
                return this.mCreateValidFilmParams;
            }
        }
        
        public virtual AssertCreateValidFilmExpectedValues AssertCreateValidFilmExpectedValues
        {
            get
            {
                if ((this.mAssertCreateValidFilmExpectedValues == null))
                {
                    this.mAssertCreateValidFilmExpectedValues = new AssertCreateValidFilmExpectedValues();
                }
                return this.mAssertCreateValidFilmExpectedValues;
            }
        }
        
        public virtual EditFilmParams EditFilmParams
        {
            get
            {
                if ((this.mEditFilmParams == null))
                {
                    this.mEditFilmParams = new EditFilmParams();
                }
                return this.mEditFilmParams;
            }
        }
        
        public virtual AssertEditFilmExpectedValues AssertEditFilmExpectedValues
        {
            get
            {
                if ((this.mAssertEditFilmExpectedValues == null))
                {
                    this.mAssertEditFilmExpectedValues = new AssertEditFilmExpectedValues();
                }
                return this.mAssertEditFilmExpectedValues;
            }
        }
        
        public virtual CreateInvalidCustomerParams CreateInvalidCustomerParams
        {
            get
            {
                if ((this.mCreateInvalidCustomerParams == null))
                {
                    this.mCreateInvalidCustomerParams = new CreateInvalidCustomerParams();
                }
                return this.mCreateInvalidCustomerParams;
            }
        }
        
        public virtual AssertCreateInvalidCustomerExpectedValues AssertCreateInvalidCustomerExpectedValues
        {
            get
            {
                if ((this.mAssertCreateInvalidCustomerExpectedValues == null))
                {
                    this.mAssertCreateInvalidCustomerExpectedValues = new AssertCreateInvalidCustomerExpectedValues();
                }
                return this.mAssertCreateInvalidCustomerExpectedValues;
            }
        }
        
        public virtual CreateValidCustomerParams CreateValidCustomerParams
        {
            get
            {
                if ((this.mCreateValidCustomerParams == null))
                {
                    this.mCreateValidCustomerParams = new CreateValidCustomerParams();
                }
                return this.mCreateValidCustomerParams;
            }
        }
        
        public virtual AssertCreateValidCustomerExpectedValues AssertCreateValidCustomerExpectedValues
        {
            get
            {
                if ((this.mAssertCreateValidCustomerExpectedValues == null))
                {
                    this.mAssertCreateValidCustomerExpectedValues = new AssertCreateValidCustomerExpectedValues();
                }
                return this.mAssertCreateValidCustomerExpectedValues;
            }
        }
        
        public virtual EditCustomerParams EditCustomerParams
        {
            get
            {
                if ((this.mEditCustomerParams == null))
                {
                    this.mEditCustomerParams = new EditCustomerParams();
                }
                return this.mEditCustomerParams;
            }
        }
        
        public virtual AssertEditCustomerExpectedValues AssertEditCustomerExpectedValues
        {
            get
            {
                if ((this.mAssertEditCustomerExpectedValues == null))
                {
                    this.mAssertEditCustomerExpectedValues = new AssertEditCustomerExpectedValues();
                }
                return this.mAssertEditCustomerExpectedValues;
            }
        }
        
        public virtual CreateTicketParams CreateTicketParams
        {
            get
            {
                if ((this.mCreateTicketParams == null))
                {
                    this.mCreateTicketParams = new CreateTicketParams();
                }
                return this.mCreateTicketParams;
            }
        }
        
        public virtual AssertCreateTicketExpectedValues AssertCreateTicketExpectedValues
        {
            get
            {
                if ((this.mAssertCreateTicketExpectedValues == null))
                {
                    this.mAssertCreateTicketExpectedValues = new AssertCreateTicketExpectedValues();
                }
                return this.mAssertCreateTicketExpectedValues;
            }
        }
        
        public virtual EditTicketParams EditTicketParams
        {
            get
            {
                if ((this.mEditTicketParams == null))
                {
                    this.mEditTicketParams = new EditTicketParams();
                }
                return this.mEditTicketParams;
            }
        }
        
        public virtual AssertEditTicketExpectedValues AssertEditTicketExpectedValues
        {
            get
            {
                if ((this.mAssertEditTicketExpectedValues == null))
                {
                    this.mAssertEditTicketExpectedValues = new AssertEditTicketExpectedValues();
                }
                return this.mAssertEditTicketExpectedValues;
            }
        }
        
        public virtual AssertAdminLogOutExpectedValues AssertAdminLogOutExpectedValues
        {
            get
            {
                if ((this.mAssertAdminLogOutExpectedValues == null))
                {
                    this.mAssertAdminLogOutExpectedValues = new AssertAdminLogOutExpectedValues();
                }
                return this.mAssertAdminLogOutExpectedValues;
            }
        }
        
        public UICinemaCinemaInternetWindow UICinemaCinemaInternetWindow
        {
            get
            {
                if ((this.mUICinemaCinemaInternetWindow == null))
                {
                    this.mUICinemaCinemaInternetWindow = new UICinemaCinemaInternetWindow();
                }
                return this.mUICinemaCinemaInternetWindow;
            }
        }
        #endregion
        
        #region Fields
        private LogInAdminParams mLogInAdminParams;
        
        private AssertLogInAdminExpectedValues mAssertLogInAdminExpectedValues;
        
        private CreateInvalidFilmParams mCreateInvalidFilmParams;
        
        private AssertCreateInvalidFilmExpectedValues mAssertCreateInvalidFilmExpectedValues;
        
        private CreateValidFilmParams mCreateValidFilmParams;
        
        private AssertCreateValidFilmExpectedValues mAssertCreateValidFilmExpectedValues;
        
        private EditFilmParams mEditFilmParams;
        
        private AssertEditFilmExpectedValues mAssertEditFilmExpectedValues;
        
        private CreateInvalidCustomerParams mCreateInvalidCustomerParams;
        
        private AssertCreateInvalidCustomerExpectedValues mAssertCreateInvalidCustomerExpectedValues;
        
        private CreateValidCustomerParams mCreateValidCustomerParams;
        
        private AssertCreateValidCustomerExpectedValues mAssertCreateValidCustomerExpectedValues;
        
        private EditCustomerParams mEditCustomerParams;
        
        private AssertEditCustomerExpectedValues mAssertEditCustomerExpectedValues;
        
        private CreateTicketParams mCreateTicketParams;
        
        private AssertCreateTicketExpectedValues mAssertCreateTicketExpectedValues;
        
        private EditTicketParams mEditTicketParams;
        
        private AssertEditTicketExpectedValues mAssertEditTicketExpectedValues;
        
        private AssertAdminLogOutExpectedValues mAssertAdminLogOutExpectedValues;
        
        private UICinemaCinemaInternetWindow mUICinemaCinemaInternetWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LogInAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LogInAdminParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@admin.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@admin.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "tp+ptfkD+zHUhbYH8nJUBYeL/8RJpL6v";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertLogInAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertLogInAdminExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Hello admin@admin.com!' link equals 'Hello admin@admin.com!'
        /// </summary>
        public string UIHelloadminadmincomHyperlinkInnerText = "Hello admin@admin.com!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateInvalidFilm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateInvalidFilmParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Film title' in 'Film title' text box
        /// </summary>
        public string UIFilmtitleEditText = "Film title";
        
        /// <summary>
        /// Type '1410' in 'Release year' text box
        /// </summary>
        public string UIReleaseyearEditText = "1410";
        
        /// <summary>
        /// Type '123' in 'Length (minutes)' text box
        /// </summary>
        public string UILengthminutesEditText = "123";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCreateInvalidFilm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertCreateInvalidFilmExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Wrong film release date.' pane equals 'Wrong film release date.'
        /// </summary>
        public string UIWrongfilmreleasedatePaneInnerText = "Wrong film release date.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateValidFilm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateValidFilmParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2017' in 'Release year' text box
        /// </summary>
        public string UIReleaseyearEdit1Text = "2017";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCreateValidFilm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertCreateValidFilmExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Film title' cell equals 'Film title '
        /// </summary>
        public string UIFilmtitleCellInnerText = "Film title ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditFilm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditFilmParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Edit' in 'Film title' text box
        /// </summary>
        public string UIFilmtitleEditText = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditFilm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertEditFilmExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Edit' cell equals 'Edit '
        /// </summary>
        public string UIEditCellInnerText = "Edit ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateInvalidCustomer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateInvalidCustomerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'kamil' in 'First name' text box
        /// </summary>
        public string UIFirstnameEditText = "kamil";
        
        /// <summary>
        /// Type 'Sarzy' in 'Last name' text box
        /// </summary>
        public string UILastnameEditText = "Sarzy";
        
        /// <summary>
        /// Type 'Alt, Control + n' in 'Last name' text box
        /// </summary>
        public string UILastnameEditSendKeys = "n";
        
        /// <summary>
        /// Type 'Sarzyński' in 'Last name' text box
        /// </summary>
        public string UILastnameEditText1 = "Sarzyński";
        
        /// <summary>
        /// Type 'ksarzynski@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "ksarzynski@gmail.com";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCreateInvalidCustomer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertCreateInvalidCustomerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Must start with capital letter.' pane equals 'Must start with capital letter.'
        /// </summary>
        public string UIMuststartwithcapitalPaneInnerText = "Must start with capital letter.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateValidCustomer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateValidCustomerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Kamil' in 'First name' text box
        /// </summary>
        public string UIFirstnameEdit1Text = "Kamil";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCreateValidCustomer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertCreateValidCustomerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Sarzyński' cell equals 'Sarzyński '
        /// </summary>
        public string UISarzyńskiCellInnerText = "Sarzyński ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditCustomer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditCustomerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Jan' in 'First name' text box
        /// </summary>
        public string UIFirstnameEditText = "Jan";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditCustomer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertEditCustomerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Jan' cell equals 'Jan '
        /// </summary>
        public string UIJanCellInnerText = "Jan ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateTicket'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CreateTicketParams
    {
        
        #region Fields
        /// <summary>
        /// Type '12' in 'Ticket price' text box
        /// </summary>
        public string UITicketpriceEditText = "12";
        
        /// <summary>
        /// Type '12/12/2017' in 'Screening date' text box
        /// </summary>
        public string UIScreeningdateEditText = "12/12/2017";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCreateTicket'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertCreateTicketExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of '12,00 zł' cell equals '12,00 zł '
        /// </summary>
        public string UIItem1200złCellInnerText = "12,00 zł ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditTicket'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditTicketParams
    {
        
        #region Fields
        /// <summary>
        /// Type '14' in 'Ticket price' text box
        /// </summary>
        public string UITicketpriceEditText = "14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEditTicket'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertEditTicketExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of '14,00 zł' cell equals '14,00 zł '
        /// </summary>
        public string UIItem1400złCellInnerText = "14,00 zł ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAdminLogOut'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertAdminLogOutExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Log in' link equals 'Log in'
        /// </summary>
        public string UILoginHyperlinkInnerText = "Log in";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICinemaCinemaInternetWindow : BrowserWindow
    {
        
        public UICinemaCinemaInternetWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Cinema - Cinema";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Cinema - Cinema");
            this.WindowTitles.Add("Log in - Cinema");
            this.WindowTitles.Add("Films - Cinema");
            this.WindowTitles.Add("Create - Cinema");
            this.WindowTitles.Add("Details - Cinema");
            this.WindowTitles.Add("Edit - Cinema");
            this.WindowTitles.Add("Customers - Cinema");
            this.WindowTitles.Add("Tickets - Cinema");
            this.WindowTitles.Add("Delete - Cinema");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICinemaCinemaDocument UICinemaCinemaDocument
        {
            get
            {
                if ((this.mUICinemaCinemaDocument == null))
                {
                    this.mUICinemaCinemaDocument = new UICinemaCinemaDocument(this);
                }
                return this.mUICinemaCinemaDocument;
            }
        }
        
        public UILoginCinemaDocument UILoginCinemaDocument
        {
            get
            {
                if ((this.mUILoginCinemaDocument == null))
                {
                    this.mUILoginCinemaDocument = new UILoginCinemaDocument(this);
                }
                return this.mUILoginCinemaDocument;
            }
        }
        
        public UIFilmsCinemaDocument UIFilmsCinemaDocument
        {
            get
            {
                if ((this.mUIFilmsCinemaDocument == null))
                {
                    this.mUIFilmsCinemaDocument = new UIFilmsCinemaDocument(this);
                }
                return this.mUIFilmsCinemaDocument;
            }
        }
        
        public UICreateCinemaDocument UICreateCinemaDocument
        {
            get
            {
                if ((this.mUICreateCinemaDocument == null))
                {
                    this.mUICreateCinemaDocument = new UICreateCinemaDocument(this);
                }
                return this.mUICreateCinemaDocument;
            }
        }
        
        public UIDetailsCinemaDocument UIDetailsCinemaDocument
        {
            get
            {
                if ((this.mUIDetailsCinemaDocument == null))
                {
                    this.mUIDetailsCinemaDocument = new UIDetailsCinemaDocument(this);
                }
                return this.mUIDetailsCinemaDocument;
            }
        }
        
        public UIEditCinemaDocument UIEditCinemaDocument
        {
            get
            {
                if ((this.mUIEditCinemaDocument == null))
                {
                    this.mUIEditCinemaDocument = new UIEditCinemaDocument(this);
                }
                return this.mUIEditCinemaDocument;
            }
        }
        
        public UICustomersCinemaDocument UICustomersCinemaDocument
        {
            get
            {
                if ((this.mUICustomersCinemaDocument == null))
                {
                    this.mUICustomersCinemaDocument = new UICustomersCinemaDocument(this);
                }
                return this.mUICustomersCinemaDocument;
            }
        }
        
        public UICreateCinemaDocument1 UICreateCinemaDocument1
        {
            get
            {
                if ((this.mUICreateCinemaDocument1 == null))
                {
                    this.mUICreateCinemaDocument1 = new UICreateCinemaDocument1(this);
                }
                return this.mUICreateCinemaDocument1;
            }
        }
        
        public UIDetailsCinemaDocument1 UIDetailsCinemaDocument1
        {
            get
            {
                if ((this.mUIDetailsCinemaDocument1 == null))
                {
                    this.mUIDetailsCinemaDocument1 = new UIDetailsCinemaDocument1(this);
                }
                return this.mUIDetailsCinemaDocument1;
            }
        }
        
        public UIEditCinemaDocument1 UIEditCinemaDocument1
        {
            get
            {
                if ((this.mUIEditCinemaDocument1 == null))
                {
                    this.mUIEditCinemaDocument1 = new UIEditCinemaDocument1(this);
                }
                return this.mUIEditCinemaDocument1;
            }
        }
        
        public UITicketsCinemaDocument UITicketsCinemaDocument
        {
            get
            {
                if ((this.mUITicketsCinemaDocument == null))
                {
                    this.mUITicketsCinemaDocument = new UITicketsCinemaDocument(this);
                }
                return this.mUITicketsCinemaDocument;
            }
        }
        
        public UICreateCinemaDocument2 UICreateCinemaDocument2
        {
            get
            {
                if ((this.mUICreateCinemaDocument2 == null))
                {
                    this.mUICreateCinemaDocument2 = new UICreateCinemaDocument2(this);
                }
                return this.mUICreateCinemaDocument2;
            }
        }
        
        public UIDetailsCinemaDocument2 UIDetailsCinemaDocument2
        {
            get
            {
                if ((this.mUIDetailsCinemaDocument2 == null))
                {
                    this.mUIDetailsCinemaDocument2 = new UIDetailsCinemaDocument2(this);
                }
                return this.mUIDetailsCinemaDocument2;
            }
        }
        
        public UIEditCinemaDocument2 UIEditCinemaDocument2
        {
            get
            {
                if ((this.mUIEditCinemaDocument2 == null))
                {
                    this.mUIEditCinemaDocument2 = new UIEditCinemaDocument2(this);
                }
                return this.mUIEditCinemaDocument2;
            }
        }
        
        public UIDeleteCinemaDocument UIDeleteCinemaDocument
        {
            get
            {
                if ((this.mUIDeleteCinemaDocument == null))
                {
                    this.mUIDeleteCinemaDocument = new UIDeleteCinemaDocument(this);
                }
                return this.mUIDeleteCinemaDocument;
            }
        }
        
        public UIDeleteCinemaDocument1 UIDeleteCinemaDocument1
        {
            get
            {
                if ((this.mUIDeleteCinemaDocument1 == null))
                {
                    this.mUIDeleteCinemaDocument1 = new UIDeleteCinemaDocument1(this);
                }
                return this.mUIDeleteCinemaDocument1;
            }
        }
        
        public UIDeleteCinemaDocument2 UIDeleteCinemaDocument2
        {
            get
            {
                if ((this.mUIDeleteCinemaDocument2 == null))
                {
                    this.mUIDeleteCinemaDocument2 = new UIDeleteCinemaDocument2(this);
                }
                return this.mUIDeleteCinemaDocument2;
            }
        }
        #endregion
        
        #region Fields
        private UICinemaCinemaDocument mUICinemaCinemaDocument;
        
        private UILoginCinemaDocument mUILoginCinemaDocument;
        
        private UIFilmsCinemaDocument mUIFilmsCinemaDocument;
        
        private UICreateCinemaDocument mUICreateCinemaDocument;
        
        private UIDetailsCinemaDocument mUIDetailsCinemaDocument;
        
        private UIEditCinemaDocument mUIEditCinemaDocument;
        
        private UICustomersCinemaDocument mUICustomersCinemaDocument;
        
        private UICreateCinemaDocument1 mUICreateCinemaDocument1;
        
        private UIDetailsCinemaDocument1 mUIDetailsCinemaDocument1;
        
        private UIEditCinemaDocument1 mUIEditCinemaDocument1;
        
        private UITicketsCinemaDocument mUITicketsCinemaDocument;
        
        private UICreateCinemaDocument2 mUICreateCinemaDocument2;
        
        private UIDetailsCinemaDocument2 mUIDetailsCinemaDocument2;
        
        private UIEditCinemaDocument2 mUIEditCinemaDocument2;
        
        private UIDeleteCinemaDocument mUIDeleteCinemaDocument;
        
        private UIDeleteCinemaDocument1 mUIDeleteCinemaDocument1;
        
        private UIDeleteCinemaDocument2 mUIDeleteCinemaDocument2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICinemaCinemaDocument : HtmlDocument
    {
        
        public UICinemaCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Cinema - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/";
            this.WindowTitles.Add("Cinema - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log in";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Account/Login\"";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUILoginHyperlink.WindowTitles.Add("Cinema - Cinema");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        
        public HtmlHyperlink UIHelloadminadmincomHyperlink
        {
            get
            {
                if ((this.mUIHelloadminadmincomHyperlink == null))
                {
                    this.mUIHelloadminadmincomHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHelloadminadmincomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "UserLogin";
                    this.mUIHelloadminadmincomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHelloadminadmincomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHelloadminadmincomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Hello admin@admin.com!";
                    this.mUIHelloadminadmincomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Manage/Index";
                    this.mUIHelloadminadmincomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Manage";
                    this.mUIHelloadminadmincomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Manage/Index";
                    this.mUIHelloadminadmincomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHelloadminadmincomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"Manage\" id=\"UserLogin\" href=\"/Man";
                    this.mUIHelloadminadmincomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIHelloadminadmincomHyperlink.WindowTitles.Add("Cinema - Cinema");
                    #endregion
                }
                return this.mUIHelloadminadmincomHyperlink;
            }
        }
        
        public HtmlHyperlink UIFilmsHyperlink
        {
            get
            {
                if ((this.mUIFilmsHyperlink == null))
                {
                    this.mUIFilmsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Films";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films\"";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIFilmsHyperlink.WindowTitles.Add("Cinema - Cinema");
                    #endregion
                }
                return this.mUIFilmsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUILoginHyperlink;
        
        private HtmlHyperlink mUIHelloadminadmincomHyperlink;
        
        private HtmlHyperlink mUIFilmsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginCinemaDocument : HtmlDocument
    {
        
        public UILoginCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Account/Login";
            this.WindowTitles.Add("Log in - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control\" id=\"Em";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - Cinema");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"form-control\" id=";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - Cinema");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log in";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\"";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILoginButton.WindowTitles.Add("Log in - Cinema");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFilmsCinemaDocument : HtmlDocument
    {
        
        public UIFilmsCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Films - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Films";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Films";
            this.WindowTitles.Add("Films - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateNewHyperlink
        {
            get
            {
                if ((this.mUICreateNewHyperlink == null))
                {
                    this.mUICreateNewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create New";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films/Create\"";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUICreateNewHyperlink.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUICreateNewHyperlink;
            }
        }
        
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films/Details/5";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films/Details/5";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films/Details/5\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "21";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films/Edit/5";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films/Edit/5";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films/Edit/5\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "20";
                    this.mUIEditHyperlink.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UICustomersHyperlink
        {
            get
            {
                if ((this.mUICustomersHyperlink == null))
                {
                    this.mUICustomersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Customers\"";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUICustomersHyperlink.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUICustomersHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films/Delete/5";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films/Delete/5";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films/Delete/5\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "22";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public HtmlButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Id] = "logout_button";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log out";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-link navbar-btn navbar-link";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-link navbar-btn navbar-li";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILogoutButton.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateNewHyperlink;
        
        private UIItemTable mUIItemTable;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUICustomersHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        
        private HtmlButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Film title \r\n\r\nRelease year \r\n\r\nLength (";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "6";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Films - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIFilmtitleCell
        {
            get
            {
                if ((this.mUIFilmtitleCell == null))
                {
                    this.mUIFilmtitleCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIFilmtitleCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIFilmtitleCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIFilmtitleCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIFilmtitleCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Film title ";
                    this.mUIFilmtitleCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIFilmtitleCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
                    this.mUIFilmtitleCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIFilmtitleCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIFilmtitleCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "17";
                    this.mUIFilmtitleCell.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUIFilmtitleCell;
            }
        }
        
        public HtmlCell UIEditCell
        {
            get
            {
                if ((this.mUIEditCell == null))
                {
                    this.mUIEditCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIEditCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIEditCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIEditCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIEditCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Edit ";
                    this.mUIEditCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIEditCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
                    this.mUIEditCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIEditCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIEditCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "17";
                    this.mUIEditCell.WindowTitles.Add("Films - Cinema");
                    #endregion
                }
                return this.mUIEditCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIFilmtitleCell;
        
        private HtmlCell mUIEditCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateCinemaDocument : HtmlDocument
    {
        
        public UICreateCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Films/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Films/Create";
            this.WindowTitles.Add("Create - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIFilmtitleEdit
        {
            get
            {
                if ((this.mUIFilmtitleEdit == null))
                {
                    this.mUIFilmtitleEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFilmtitleEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Title";
                    this.mUIFilmtitleEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Title";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Film title";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Title\" class=\"form-control\" id=\"Ti";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIFilmtitleEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIFilmtitleEdit;
            }
        }
        
        public HtmlEdit UIReleaseyearEdit
        {
            get
            {
                if ((this.mUIReleaseyearEdit == null))
                {
                    this.mUIReleaseyearEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIReleaseyearEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Year";
                    this.mUIReleaseyearEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Year";
                    this.mUIReleaseyearEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Release year";
                    this.mUIReleaseyearEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIReleaseyearEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIReleaseyearEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIReleaseyearEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Year\" class=\"form-control\" id=\"Yea";
                    this.mUIReleaseyearEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIReleaseyearEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIReleaseyearEdit;
            }
        }
        
        public HtmlEdit UILengthminutesEdit
        {
            get
            {
                if ((this.mUILengthminutesEdit == null))
                {
                    this.mUILengthminutesEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUILengthminutesEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Length";
                    this.mUILengthminutesEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Length";
                    this.mUILengthminutesEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Length (minutes)";
                    this.mUILengthminutesEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUILengthminutesEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUILengthminutesEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUILengthminutesEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Length\" class=\"form-control\" id=\"L";
                    this.mUILengthminutesEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUILengthminutesEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUILengthminutesEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    this.mUICreateButton.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlSpan UIWrongfilmreleasedatePane
        {
            get
            {
                if ((this.mUIWrongfilmreleasedatePane == null))
                {
                    this.mUIWrongfilmreleasedatePane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIWrongfilmreleasedatePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIWrongfilmreleasedatePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIWrongfilmreleasedatePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Wrong film release date.";
                    this.mUIWrongfilmreleasedatePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIWrongfilmreleasedatePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "text-danger field-validation-error";
                    this.mUIWrongfilmreleasedatePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"text-danger field-validation-error\" data-valmsg-replace=\"true\" data-valmsg" +
                        "-for=\"Year\"";
                    this.mUIWrongfilmreleasedatePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
                    this.mUIWrongfilmreleasedatePane.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIWrongfilmreleasedatePane;
            }
        }
        
        public HtmlEdit UIReleaseyearEdit1
        {
            get
            {
                if ((this.mUIReleaseyearEdit1 == null))
                {
                    this.mUIReleaseyearEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIReleaseyearEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "Year";
                    this.mUIReleaseyearEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "Year";
                    this.mUIReleaseyearEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Release year";
                    this.mUIReleaseyearEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIReleaseyearEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIReleaseyearEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control input-validation-error";
                    this.mUIReleaseyearEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Year\" class=\"form-control input-va";
                    this.mUIReleaseyearEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIReleaseyearEdit1.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIReleaseyearEdit1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIFilmtitleEdit;
        
        private HtmlEdit mUIReleaseyearEdit;
        
        private HtmlEdit mUILengthminutesEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlSpan mUIWrongfilmreleasedatePane;
        
        private HtmlEdit mUIReleaseyearEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsCinemaDocument : HtmlDocument
    {
        
        public UIDetailsCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Films/Details/5";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Films/Details/5";
            this.WindowTitles.Add("Details - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Details - Cinema");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditCinemaDocument : HtmlDocument
    {
        
        public UIEditCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Films/Edit/5";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Films/Edit/5";
            this.WindowTitles.Add("Edit - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIFilmtitleEdit
        {
            get
            {
                if ((this.mUIFilmtitleEdit == null))
                {
                    this.mUIFilmtitleEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFilmtitleEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Title";
                    this.mUIFilmtitleEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Title";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Film title";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Title\" class=\"form-control\" id=\"Ti";
                    this.mUIFilmtitleEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIFilmtitleEdit.WindowTitles.Add("Edit - Cinema");
                    #endregion
                }
                return this.mUIFilmtitleEdit;
            }
        }
        
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mUISaveButton.WindowTitles.Add("Edit - Cinema");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIFilmtitleEdit;
        
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICustomersCinemaDocument : HtmlDocument
    {
        
        public UICustomersCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Customers - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Customers";
            this.WindowTitles.Add("Customers - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateNewHyperlink
        {
            get
            {
                if ((this.mUICreateNewHyperlink == null))
                {
                    this.mUICreateNewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create New";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Customers/Create\"";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUICreateNewHyperlink.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUICreateNewHyperlink;
            }
        }
        
        public UIItemTable1 UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable1(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "customer_details";
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Details/3";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers/Details/3";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"customer_details\" href=\"/Customers/D";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "14";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "customer_edit";
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Edit/3";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers/Edit/3";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"customer_edit\" href=\"/Customers/Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "13";
                    this.mUIEditHyperlink.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UITicketsHyperlink
        {
            get
            {
                if ((this.mUITicketsHyperlink == null))
                {
                    this.mUITicketsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUITicketsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUITicketsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUITicketsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUITicketsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Tickets";
                    this.mUITicketsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Tickets";
                    this.mUITicketsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUITicketsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Tickets";
                    this.mUITicketsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUITicketsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Tickets\"";
                    this.mUITicketsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUITicketsHyperlink.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUITicketsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "customer_delete";
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers/Delete/3";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers/Delete/3";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"customer_delete\" href=\"/Customers/De";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "15";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public HtmlHyperlink UIFilmsHyperlink
        {
            get
            {
                if ((this.mUIFilmsHyperlink == null))
                {
                    this.mUIFilmsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIFilmsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Films";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Films";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Films";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Films\"";
                    this.mUIFilmsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIFilmsHyperlink.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUIFilmsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateNewHyperlink;
        
        private UIItemTable1 mUIItemTable;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUITicketsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        
        private HtmlHyperlink mUIFilmsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable1 : HtmlTable
    {
        
        public UIItemTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "First name \r\n\r\nLast name \r\n\r\nEmail \r\n\r\n\r";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "3";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Customers - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlCell UISarzyńskiCell
        {
            get
            {
                if ((this.mUISarzyńskiCell == null))
                {
                    this.mUISarzyńskiCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUISarzyńskiCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUISarzyńskiCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUISarzyńskiCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUISarzyńskiCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Sarzyński ";
                    this.mUISarzyńskiCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUISarzyńskiCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "2";
                    this.mUISarzyńskiCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUISarzyńskiCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUISarzyńskiCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "6";
                    this.mUISarzyńskiCell.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUISarzyńskiCell;
            }
        }
        
        public HtmlCell UIJanCell
        {
            get
            {
                if ((this.mUIJanCell == null))
                {
                    this.mUIJanCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIJanCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIJanCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIJanCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIJanCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Jan ";
                    this.mUIJanCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIJanCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "2";
                    this.mUIJanCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIJanCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIJanCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "5";
                    this.mUIJanCell.WindowTitles.Add("Customers - Cinema");
                    #endregion
                }
                return this.mUIJanCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUISarzyńskiCell;
        
        private HtmlCell mUIJanCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateCinemaDocument1 : HtmlDocument
    {
        
        public UICreateCinemaDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Customers/Create";
            this.WindowTitles.Add("Create - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIFirstnameEdit
        {
            get
            {
                if ((this.mUIFirstnameEdit == null))
                {
                    this.mUIFirstnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFirstnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "FirstName";
                    this.mUIFirstnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "FirstName";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "First name";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"FirstName\" class=\"form-control\" id";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIFirstnameEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIFirstnameEdit;
            }
        }
        
        public HtmlEdit UILastnameEdit
        {
            get
            {
                if ((this.mUILastnameEdit == null))
                {
                    this.mUILastnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUILastnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "LastName";
                    this.mUILastnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "LastName";
                    this.mUILastnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Last name";
                    this.mUILastnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUILastnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUILastnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUILastnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"LastName\" class=\"form-control\" id=";
                    this.mUILastnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUILastnameEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUILastnameEdit;
            }
        }
        
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control\" id=\"Em";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIEmailEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    this.mUICreateButton.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        
        public HtmlSpan UIMuststartwithcapitalPane
        {
            get
            {
                if ((this.mUIMuststartwithcapitalPane == null))
                {
                    this.mUIMuststartwithcapitalPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIMuststartwithcapitalPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIMuststartwithcapitalPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMuststartwithcapitalPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Must start with capital letter.";
                    this.mUIMuststartwithcapitalPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMuststartwithcapitalPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "text-danger field-validation-error";
                    this.mUIMuststartwithcapitalPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"text-danger field-validation-error\" data-valmsg-replace=\"true\" data-valmsg" +
                        "-for=\"FirstName\"";
                    this.mUIMuststartwithcapitalPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
                    this.mUIMuststartwithcapitalPane.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIMuststartwithcapitalPane;
            }
        }
        
        public HtmlEdit UIFirstnameEdit1
        {
            get
            {
                if ((this.mUIFirstnameEdit1 == null))
                {
                    this.mUIFirstnameEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFirstnameEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "FirstName";
                    this.mUIFirstnameEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "FirstName";
                    this.mUIFirstnameEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "First name";
                    this.mUIFirstnameEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFirstnameEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFirstnameEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control input-validation-error";
                    this.mUIFirstnameEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"FirstName\" class=\"form-control inp";
                    this.mUIFirstnameEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIFirstnameEdit1.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIFirstnameEdit1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIFirstnameEdit;
        
        private HtmlEdit mUILastnameEdit;
        
        private HtmlEdit mUIEmailEdit;
        
        private HtmlInputButton mUICreateButton;
        
        private HtmlSpan mUIMuststartwithcapitalPane;
        
        private HtmlEdit mUIFirstnameEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsCinemaDocument1 : HtmlDocument
    {
        
        public UIDetailsCinemaDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers/Details/3";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Customers/Details/3";
            this.WindowTitles.Add("Details - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Customers\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Details - Cinema");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditCinemaDocument1 : HtmlDocument
    {
        
        public UIEditCinemaDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers/Edit/3";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Customers/Edit/3";
            this.WindowTitles.Add("Edit - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIFirstnameEdit
        {
            get
            {
                if ((this.mUIFirstnameEdit == null))
                {
                    this.mUIFirstnameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFirstnameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "FirstName";
                    this.mUIFirstnameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "FirstName";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "First name";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"FirstName\" class=\"form-control\" id";
                    this.mUIFirstnameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIFirstnameEdit.WindowTitles.Add("Edit - Cinema");
                    #endregion
                }
                return this.mUIFirstnameEdit;
            }
        }
        
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = "customer_edit";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"customer_edi";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mUISaveButton.WindowTitles.Add("Edit - Cinema");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIFirstnameEdit;
        
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITicketsCinemaDocument : HtmlDocument
    {
        
        public UITicketsCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Tickets - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Tickets";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Tickets";
            this.WindowTitles.Add("Tickets - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateNewHyperlink
        {
            get
            {
                if ((this.mUICreateNewHyperlink == null))
                {
                    this.mUICreateNewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICreateNewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create New";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Tickets/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Tickets/Create";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Tickets/Create\"";
                    this.mUICreateNewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUICreateNewHyperlink.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUICreateNewHyperlink;
            }
        }
        
        public UIItemTable2 UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable2(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Tickets/Details/1";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Tickets/Details/1";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Tickets/Details/1\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "10";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Tickets/Edit/1";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Tickets/Edit/1";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Tickets/Edit/1\"";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIEditHyperlink.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Tickets/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Tickets/Delete/1";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Tickets/Delete/1\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public HtmlHyperlink UICustomersHyperlink
        {
            get
            {
                if ((this.mUICustomersHyperlink == null))
                {
                    this.mUICustomersHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUICustomersHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Customers";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Customers\"";
                    this.mUICustomersHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUICustomersHyperlink.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUICustomersHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateNewHyperlink;
        
        private UIItemTable2 mUIItemTable;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        
        private HtmlHyperlink mUICustomersHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable2 : HtmlTable
    {
        
        public UIItemTable2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Ticket price \r\n\r\nScreening date \r\n\r\nCust";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "5";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Tickets - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIItem1200złCell
        {
            get
            {
                if ((this.mUIItem1200złCell == null))
                {
                    this.mUIItem1200złCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem1200złCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem1200złCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem1200złCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem1200złCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "12,00 zł ";
                    this.mUIItem1200złCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIItem1200złCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUIItem1200złCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIItem1200złCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIItem1200złCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "1";
                    this.mUIItem1200złCell.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUIItem1200złCell;
            }
        }
        
        public HtmlCell UIItem1400złCell
        {
            get
            {
                if ((this.mUIItem1400złCell == null))
                {
                    this.mUIItem1400złCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem1400złCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem1400złCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem1400złCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem1400złCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "14,00 zł ";
                    this.mUIItem1400złCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIItem1400złCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUIItem1400złCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIItem1400złCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIItem1400złCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "1";
                    this.mUIItem1400złCell.WindowTitles.Add("Tickets - Cinema");
                    #endregion
                }
                return this.mUIItem1400złCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIItem1200złCell;
        
        private HtmlCell mUIItem1400złCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateCinemaDocument2 : HtmlDocument
    {
        
        public UICreateCinemaDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Tickets/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Tickets/Create";
            this.WindowTitles.Add("Create - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UITicketpriceEdit
        {
            get
            {
                if ((this.mUITicketpriceEdit == null))
                {
                    this.mUITicketpriceEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITicketpriceEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Price";
                    this.mUITicketpriceEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Price";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Ticket price";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Price\" class=\"form-control\" id=\"Pr";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUITicketpriceEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUITicketpriceEdit;
            }
        }
        
        public HtmlEdit UIScreeningdateEdit
        {
            get
            {
                if ((this.mUIScreeningdateEdit == null))
                {
                    this.mUIScreeningdateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIScreeningdateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Date";
                    this.mUIScreeningdateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Date";
                    this.mUIScreeningdateEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Screening date";
                    this.mUIScreeningdateEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIScreeningdateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIScreeningdateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIScreeningdateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Date\" class=\"form-control\" id=\"Dat";
                    this.mUIScreeningdateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIScreeningdateEdit.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUIScreeningdateEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "4";
                    this.mUICreateButton.WindowTitles.Add("Create - Cinema");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUITicketpriceEdit;
        
        private HtmlEdit mUIScreeningdateEdit;
        
        private HtmlInputButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsCinemaDocument2 : HtmlDocument
    {
        
        public UIDetailsCinemaDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Tickets/Details/1";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Tickets/Details/1";
            this.WindowTitles.Add("Details - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Tickets";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:44378/Tickets";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Tickets\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Details - Cinema");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditCinemaDocument2 : HtmlDocument
    {
        
        public UIEditCinemaDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Tickets/Edit/1";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Tickets/Edit/1";
            this.WindowTitles.Add("Edit - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UITicketpriceEdit
        {
            get
            {
                if ((this.mUITicketpriceEdit == null))
                {
                    this.mUITicketpriceEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITicketpriceEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Price";
                    this.mUITicketpriceEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Price";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Ticket price";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Price\" class=\"form-control\" id=\"Pr";
                    this.mUITicketpriceEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUITicketpriceEdit.WindowTitles.Add("Edit - Cinema");
                    #endregion
                }
                return this.mUITicketpriceEdit;
            }
        }
        
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    this.mUISaveButton.WindowTitles.Add("Edit - Cinema");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUITicketpriceEdit;
        
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteCinemaDocument : HtmlDocument
    {
        
        public UIDeleteCinemaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Tickets/Delete/1";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Tickets/Delete/1";
            this.WindowTitles.Add("Delete - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - Cinema");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteCinemaDocument1 : HtmlDocument
    {
        
        public UIDeleteCinemaDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Customers/Delete/3";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Customers/Delete/3";
            this.WindowTitles.Add("Delete - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = "customer_delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"customer_del";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - Cinema");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteCinemaDocument2 : HtmlDocument
    {
        
        public UIDeleteCinemaDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - Cinema";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Films/Delete/5";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:44378/Films/Delete/5";
            this.WindowTitles.Add("Delete - Cinema");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - Cinema");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
}
